/*
  Created by: Fei Song and RYAN
  File Name: tiny.cup
  To Build: java java_cup.Main < tiny.cup
*/


/* ----------------------Preliminary Declarations Section--------------------*/

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import absyn.*;

/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:

    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {

        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");

        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }

        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);

        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }

    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* global variable for the -a switch */
    public static boolean SHOW_TREE = false;

:};


/* ------------Declaration of Terminals and Non Terminals Section----------- */

terminal IF, ELSE, WHILE, RETURN, VOID, INT;
terminal ASSIGN, EQ, NE, LT, LE, GT, GE, PLUS, MINUS, MUL, DIV;
terminal LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, SEMI, COMMA;
terminal String ID, NUM;
terminal ERROR;

non terminal DecList program;
non terminal DecList decList;
non terminal Dec dec;
non terminal VarDec varDec;
non terminal NameTy nameTy;
non terminal FunctionDec funDec;
non terminal VarDecList params, paramList, locDec;
non terminal VarDec param;
non terminal CompoundExp compStmt;

non terminal ExpList args, argList, stmtList;
non terminal Exp exp, stmt, expStmt, addExp, simpExp, term, factor, selStmt;
non terminal WhileExp iterStmt;
non terminal ReturnExp returnStmt;

non terminal Var var;
non terminal CallExp call;
non terminal Integer relop, addop, mulop;

precedence left PLUS, MINUS, MUL, DIV, LT, LE, GT, GE, EQ, NE, ELSE;
precedence right ASSIGN;
precedence nonassoc RETURN;

/* ----------------------------Grammar Section-------------------- */

start with program;

//1 program --> declaration-list
program    ::= decList:d
             {:
               RESULT = d;
               System.out.println("Print tree here");
             :}
           ;

//2 declaration-list --> declaration-list declaration | declaration
decList    ::= decList:d1 dec:d2
             {:
               DecList a = d1;
               if(d1 == null) {
                  d1 = new DecList(d2, null);
                  RESULT = d1;
               } else {
                  while(a.tail != null) {
                    a = a.tail;
                  }
                  a.tail = new DecList(d2, null);
                  RESULT = d1;
               }
             :}
             | dec:d
             {:
               RESULT = new DecList(d, null);
             :}
           ;

//3 declaration --> var-declaration | fun-declaration
dec        ::= varDec:d
             {:
               RESULT = d;
             :}
             | funDec:d
             {:
               RESULT = d;
             :}
             ;

//4 var-declaration --> type-specifier ID ; | type-specifier ID [ NUM ] ;
varDec   ::= nameTy:t ID:i SEMI
           {:
             // TODO: check type isnt void for this case, report errors
             RESULT = new SimpleDec(tleft, t, i);
           :}
           | nameTy:t ID:i LBRACKET NUM:n RBRACKET SEMI
           {:
             // TODO: check type isnt void for this case, report errors
             RESULT = new ArrayDec(tleft, t, i, new IntExp(nleft, Integer.parseInt(n)));
           :}
            // TODO: report an error for invalid variable declarations
         ;

//5 type-specifier --> int | void
nameTy     ::= INT:n
            {:
              RESULT = new NameTy(nleft, NameTy.INT);
            :}
            | VOID:v
            {:
              RESULT = new NameTy(vleft, NameTy.VOID);
            :}
          ;

//6 fun-declaration --> type-specifier ID ( params ) compound-stmt
funDec   ::= nameTy:t ID:i LPAREN params:p RPAREN compStmt:c
           {:
             RESULT = new FunctionDec(tleft, t, i, p , c);
           :}
           // TODO: check errors
         ;

//7 params --> param-list | void
params   ::= paramList:p
           {:
             RESULT = p;
           :}
           | VOID:v
           {:
             RESULT = new VarDecList(new SimpleDec(vleft, new NameTy(vleft, NameTy.VOID), null), null);
           :}
           // TODO: check errors
         ;

//8 param-list --> param-list , param | param
paramList ::= paramList:p1 COMMA param:p2
            {:
              VarDecList v = p1;
              if(p1 == null) {
                p1 = new VarDecList(p2, null);
                RESULT = p1;
              } else {
                while(v.tail != null) {
                  v = v.tail;
                }
                v.tail = new VarDecList(p2, null);
                RESULT = p1;
              }
            :}
          | param:p
            {:
              RESULT = new VarDecList(p, null);
            :}
          ;

//9 param --> type-specifier ID | type-specifier ID [ ]
param ::= INT:n ID:i
            {:
              RESULT = new SimpleDec(nleft, new NameTy(nleft, NameTy.INT), i);
            :}
          | INT:n ID:i LBRACKET RBRACKET
            {: // TODO: Fix the new IntExp, it shouldnt have 0, should have value
              RESULT = new ArrayDec(nleft, new NameTy(nleft, NameTy.INT), i, new IntExp(nleft, 0));
            :}
          ;

//10 compound-stmt --> { local-declarations statement-list }
compStmt ::= LBRACE:lb locDec:ld stmtList:e RBRACE
            {:
              RESULT = new CompoundExp(lbleft, ld, e);
            :}
          ;

//11 local-declarations --> local-declarations var-declaration | empty
locDec ::= locDec:d1 varDec:d2
            {:
              VarDecList t = d1;
              while(t.tail != null)
                t = t.tail;
              t.tail = new VarDecList(d2, null);
              RESULT = d1;
            :}
            | //empty
          ;

//12 statement-list --> statement-list statement | empty
stmtList ::= stmtList:s1 stmt:s2
            {:
              ExpList t = s1;
              while(t.tail != null)
                t = t.tail;
              t.tail = new ExpList(s2, null);
              RESULT = s1;
            :}
            | //empty
          ;

//13 statement --> expression-stmt | compound-stmt | selection.stmt | iteration-stmt | return-stmt
stmt ::=    expStmt:s
            {:
              RESULT = s;
            :}
            | compStmt:s
            {:
              RESULT = s;
            :}
            | selStmt:s
            {:
              RESULT = s;
            :}
            | iterStmt:s
            {:
              RESULT = s;
            :}
            | returnStmt:s
            {:
              RESULT = s;
            :}
          ;

//14 expression-stmt --> expression ; | ;
expStmt ::= exp:e SEMI
            {:
              RESULT = e;
            :}
            | SEMI
          ;

//15 selection-stmt --> if ( expression ) statement | if ( expression ) statement else statement
selStmt ::= IF:i LPAREN exp:e RPAREN stmt:s
            {:
              RESULT = new IfExp(ileft, e, s, null);
            :}
            | IF:i LPAREN exp:e RPAREN stmt:s1 ELSE stmt:s2
            {:
              RESULT = new IfExp(ileft, e, s1, s2);
            :}
          ;

//16 iteration-stmt --> while ( expression ) statement
iterStmt ::= WHILE:w LPAREN exp:e RPAREN stmt:s
            {:
              RESULT = new WhileExp(wleft, e, s);
            :}
          ;

//17 return-stmt --> return ; | return expression ;
returnStmt ::= RETURN:r SEMI
            {:
              RESULT = new ReturnExp(rleft, null);
            :}
            | RETURN:r exp:e SEMI
            {:
              RESULT = new ReturnExp(rleft, e);
            :}
          ;

//18 expression --> var = expression | simple-expression
exp ::=     var:v ASSIGN exp:e
            {:
              RESULT = new AssignExp(vleft, v, e);
            :}
            | simpExp:s
            {:
              RESULT = s;
            :}
          ;

//19 var --> ID | ID [ expression ]
var ::=     ID:i
            {:
              RESULT = new SimpleVar(ileft, i);
            :}
            | ID:i LBRACKET exp:e RBRACKET
            {:
              RESULT = new IndexVar(ileft, i, e);
            :}
          ;

//20 simple-expression --> additive-expression relop additive-expression | additive-expression
simpExp ::= addExp:e1 relop:a addExp:e2
            {:
              RESULT = new OpExp(e1left, e1, a, e2);
            :}
            | addExp:e
            {:
              RESULT = e;
            :}
          ;

//21 relop --> <= | < | > | >= | == | !=
relop ::=     LE
            {:
              RESULT = OpExp.LE;
            :}
            | LT
            {:
              RESULT = OpExp.LT;
            :}
            | GT
            {:
              RESULT = OpExp.GT;
            :}
            | GE
            {:
              RESULT = OpExp.GE;
            :}
            | EQ
            {:
              RESULT = OpExp.EQ;
            :}
            | NE
            {:
              RESULT = OpExp.NE;
            :}
          ;

//22 additive-expression --> additive-expression addop term | term
addExp ::= addExp:e addop:a term:t
            {:
              RESULT = new OpExp(eleft, e, OpExp.PLUS, t);
            :}
            | term:t
            {:
              RESULT = t;
            :}
          ;

//23 addop --> + | -
addop ::=    PLUS
            {:
              RESULT = OpExp.PLUS;
            :}
            | MINUS
            {:
              RESULT = OpExp.MINUS;
            :}
          ;

//24 term --> term mulop factor | factor
term ::=    term:t mulop:m factor:f
            {:
              RESULT = new OpExp(tleft, t, m, f);
            :}
            | factor:f
            {:
              RESULT = f;
            :}
          ;

//25 mulop --> * | /
mulop ::=   MUL
            {:
              RESULT = OpExp.MUL;
            :}
            | DIV
            {:
              RESULT = OpExp.DIV;
            :}
          ;

//26 factor --> ( expression ) | var | call | NUM
factor ::=  LPAREN exp:e RPAREN
            {:
              RESULT = e;
            :}
            | var:v
            {:
              RESULT = new VarExp(vleft, v);
            :}
            | call:c
            {:
              RESULT = c;
            :}
            | NUM:n
            {:
              RESULT = new IntExp(nleft, Integer.parseInt(n));
            :}
          ;

//27 call --> ID ( args )
call       ::= ID:i LPAREN args:a RPAREN
             {:
               RESULT = new CallExp(ileft, i, a);
             :}
           ;

//28 args --> arg-list | empty
args       ::= argList:a
             {:
               RESULT = a;
             :}
             |
             {:
               RESULT = null;
             :}
           ;

//29 arg-list --> arg-list , expression | expression
argList    ::= argList:a COMMA exp:e
             {:
               ExpList b = a;
               if(a == null) {
                 a = new ExpList(e, null);
                 RESULT = a;
               } else {
                 while(b.tail != null) {
                   b = b.tail;
                 }
                 b.tail = new ExpList(e, null);
                 RESULT = a;
               }
             :}
           | exp:e
             {:
               RESULT = new ExpList(e, null);
             :}
           ;
